name: "Terraform Integration Tests - NEW"
run-name: "Terraform Integration Tests - NEW"
on:
  workflow_dispatch:
    inputs:  
      targets:
        description: 'Specify targets to test'
        type: string
        required: false
        default: 'all'

  pull_request:
    types: [opened, synchronize]

env:
  PR: ${{ github.event_name == 'pull_request' }}
  TARGETS: ${{ inputs.targets }}

jobs:
  Check-PR-Name:
    container: python:3.11-slim
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Run PR Name Check Script
        run: python3 scripts/check_pr_name.py ${{ github.event_name }}


  Run-Integration-Test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/provider_testing:latest

    environment: ${{ github.event.pull_request.head.repo.full_name == github.repository && 'provider-integration-testing-internal' || 'external-env' }}

    concurrency:
      group: sandbox_interfacing_testing_environment
      cancel-in-progress: false

    env: 
      CLIENT_ID: ${{ secrets.TESTING_CLIENT_ID }}
      CLIENT_SEC: ${{ secrets.TESTING_CLIENT_SECRET }}
      CLIENT_FQDN: ${{ secrets.TESTING_JAMFPRO_INSTANCE_FQDN }}
      REF_TO_CHECKOUT: ${{ github.event_name == 'pull_request' && format('refs/pull/{0}/head', github.event.pull_request.number) || github.ref }}
    
    steps:
      - name: Checkout Terraform Repository
        uses: actions/checkout@v4
        with:
          repository: deploymenttheory/terraform-provider-jamfpro
          ref: ${{ env.REF_TO_CHECKOUT }}
          path: terraform-provider-jamfpro


      - name: Compile Provider
        run: |
          cd ./terraform-provider-jamfpro
          mkdir -p ~/.terraform.d/plugins/terraform.local/local/jamfpro/0.1.0/linux_amd64/
          go build
          mv ./terraform-provider-jamfpro ~/.terraform.d/plugins/terraform.local/local/jamfpro/0.1.0/linux_amd64/
          chmod +x ~/.terraform.d/plugins/terraform.local/local/jamfpro/0.1.0/linux_amd64/terraform-provider-jamfpro
          cd testing
          terraform init


      - name: Generate Test Targets
        if: github.event_name == 'pull_request'
        run: |
          cd ../
          python3 scripts/get_targets_to_file.py \
          --repo-owner ${{ github.repository_owner }} \
          --repo-name ${{ github.event.repository.name }} \
          --pr-number ${{ github.event.pull_request.number }} \
          --github-token ${{ github.token }}

        
      - name: Set Test Targets
        id: set-targets
        run: |
          if [ -f "target_resources.txt" ]; then
            targets=$(cat target_resources.txt)
          elif [ "$TARGETS" != "all" ] && [ ! -z "$TARGETS" ]; then
            targets="$TARGETS"
          else
            targets="all"
          fi
          echo "targets=$targets" >> $GITHUB_OUTPUT


      - name: Generate UUID
        id: generate-uuid
        run: |
          generated_uuid=$(uuidgen)
          echo "uuid=$generated_uuid" >> $GITHUB_OUTPUT
          echo "Run ID: $generated_uuid"


      - name: Populate Testing Directory
        id: generate-test-dir
        run: |
          python3 ${{ steps.set-targets-outputs.targets }}


      - name: Build TFVARS File
        run: |
          cd terraform-provider-jamfpro/testing/${{ steps.generate-test-dir.outputs.test_dir }}
          cat <<EOF > terraform.tfvars
          jamfpro_instance_fqdn="$CLIENT_FQDN"
          jamfpro_auth_method="oauth2"
          jamfpro_client_id="$CLIENT_ID"
          jamfpro_client_secret="$CLIENT_SEC"
          jamfpro_token_refresh_buffer_period_seconds="30"
          jamfpro_mandatory_request_delay_milliseconds="100"
          testing_id="${{ steps.generate-uuid.outputs.uuid }}"
          EOF


        # This needs to go in an "Executor" type script
      - name: Scaffolding
        run: |
          echo "PLEASE NOTE at 23:59 a wipe job is performed on all testing objects. Tests run at this time will most likely fail."
          cd ./terraform-provider-jamfpro/testing/setup
          ./scaffolding.sh -r ${{ steps.generate-uuid.outputs.uuid }}

      # For testing, saves a lot of time. Only care if it compiles right now.
      # - name: Run Tests
      #   run: |  
            # Convert this to a script which checks for the need of scaffoldings
      #     cd ./terraform-provider-jamfpro/testing
      #     terraform fmt
      #     terraform init
      #     terraform test

      - name: Cleanup
        run: |
          # Waits 5 seconds to allow for deletes to properly apply after test.
          sleep 5
          cd ./terraform-provider-jamfpro/testing/setup
          ./cleanup.sh -r ${{ steps.generate-uuid.outputs.uuid }}


      - name: Diff cascade - Terraform Plan (Pre-Apply)
        id: plan_pre # What is this?
        run: |
          cd ./terraform-provider-jamfpro/testing
          chmod +x ./diff_cascade_check.sh
          ./diff_cascade_check.sh
          